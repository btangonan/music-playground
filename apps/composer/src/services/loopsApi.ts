/**
 * Loops API client
 * Handles CRUD operations for loops with proper response unwrapping
 */

import { httpClient } from './httpClient'
import { Loop, LoopSchema } from '@music/types/schemas'

/**
 * Backend response formats
 * Backend wraps single loops in {loop: Loop} and lists in {loops: Loop[]}
 */
interface LoopResponse {
  loop: Loop
}

interface LoopsResponse {
  loops: Loop[]
}

/**
 * Loops API operations
 */
export const loopsApi = {
  /**
   * Create a new loop
   * @param loopData - Loop data without id and updatedAt (generated by backend)
   * @returns Created loop with id and updatedAt from backend
   */
  async createLoop(loopData: Omit<Loop, 'id' | 'updatedAt'>): Promise<Loop> {
    // Validate against schema (omit id and updatedAt as backend generates these)
    const validated = LoopSchema.omit({ id: true, updatedAt: true }).parse(loopData)

    // Make API request
    const response = await httpClient.post<LoopResponse>('/api/loops', validated)

    // Unwrap {loop: Loop} response format
    return response.loop
  },

  /**
   * Get a loop by ID
   * @param id - Loop UUID
   * @returns Loop data
   */
  async getLoop(id: string): Promise<Loop> {
    const response = await httpClient.get<LoopResponse>(`/api/loops/${id}`)

    // Unwrap {loop: Loop} response format
    return response.loop
  },

  /**
   * Update an existing loop
   * @param id - Loop UUID
   * @param loopData - Partial loop data to update
   * @returns Updated loop
   */
  async updateLoop(id: string, loopData: Partial<Loop>): Promise<Loop> {
    // Validate partial data against schema
    const validated = LoopSchema.partial().parse(loopData)

    // Make API request
    const response = await httpClient.put<LoopResponse>(`/api/loops/${id}`, validated)

    // Unwrap {loop: Loop} response format
    return response.loop
  },

  /**
   * Delete a loop
   * @param id - Loop UUID
   */
  async deleteLoop(id: string): Promise<void> {
    await httpClient.delete(`/api/loops/${id}`)
  },

  /**
   * List all loops for the authenticated user
   * @returns Array of loops
   */
  async listLoops(): Promise<Loop[]> {
    const response = await httpClient.get<LoopsResponse>('/api/loops')

    // Unwrap {loops: Loop[]} response format
    return response.loops
  },
}
